---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

import Base from "../../components/Base.astro";
import Centered from "../../components/Centered.astro";
import Title from "../../components/Title.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const meta = await getCollection("photography");
  const imagePromises = import.meta.glob<{ default: ImageMetadata }>(
    "/src/content/photography/**/*.{jpg,jpeg}",
  );

  const images = new Map<string, ImageMetadata>();
  for (const imagePath in imagePromises) {
    const imageData = await imagePromises[imagePath]();

    images.set(imagePath, imageData.default);
  }

  const childMap = meta.reduce(
    (acc, entry) => {
      const parentId = entry.data.parent;
      const childSlug = entry.id.split("/").slice(0, -1).join("/");

      if (parentId) {
        if (!acc[parentId]) {
          acc[parentId] = [];
        }
        acc[parentId].push(childSlug);
      }

      return acc;
    },
    {} as Record<string, string[]>,
  );

  // create the list of slugs and params to generate
  const pages = [];

  //top level page
  const topLevelAlbums = meta
    .filter((album) => album.data.parent === undefined)
    .map((album) => ({
      name: album.data.title,
      url: `/photography/${album.id.split("/").slice(0, -1).join("/")}`,
      thumb: images
        .entries()
        .find((value) => value[0].endsWith(album.data.cover))?.[1],
    }));
  console.log(topLevelAlbums);

  pages.push({
    params: { slug: "/" },
    props: {
      albumName: "Photography",
      images: [],
      subAlbums: topLevelAlbums,
    },
  });

  // all albums
  for (const album of meta) {
    const albumPath =
      "/src/content/photography/" + album.id.split("/").slice(0, -1).join("/");

    // filter images
    const albumImages = Array.from(images.entries())
      .filter(
        ([imagePath, metadata]) =>
          imagePath.split("/").slice(0, -1).join("/") === albumPath,
      )
      .map(([imagePath, metadata]) => metadata);

    const subAlbums = (childMap[album.data.id] || []).map((childSlug) => ({
      name: meta.find(
        (e) => e.id.split("/").at(-2) === childSlug.split("/").at(-1),
      )?.data.title,
      url: `/photography/${childSlug}`,
      thumb: images
        .entries()
        .find((value) =>
          value[0].endsWith(
            meta.find(
              (e) => e.id.split("/").at(-2) === childSlug.split("/").at(-1),
            )?.data.cover || "",
          ),
        )?.[1],
    }));

    console.log(subAlbums);

    pages.push({
      params: { slug: album.id.split("/").slice(0, -1).join("/") },
      props: {
        albumName: album.data.title,
        images: albumImages,
        subAlbums: subAlbums,
      },
    });
  }

  return pages;
}

interface Props {
  albumName: string;
  images: ImageMetadata[];
  subAlbums: { name: string; url: string; thumb: ImageMetadata }[];
}

const { albumName, images, subAlbums } = Astro.props;
---

<Base page_title={albumName} lang="en">
  <Centered>
    <Title title={albumName} />
    <div class="mx-auto mb-12 grid max-w-7xl grid-cols-2 gap-x-6 gap-y-8">
      {
        subAlbums.length > 0 && (
          <>
            {subAlbums.map((album) => (
              <a
                class="flex flex-col rounded-2xl"
                href={album.url}
                title={album.name}
              >
                <figure class="aspect-3/2 w-full rounded-2xl">
                  <Image
                    class="aspect-3/2 w-full overflow-hidden rounded-2xl object-cover"
                    src={album.thumb}
                    alt={`Image thumbnail.`}
                    loading="lazy"
                    decoding="async"
                    width={600}
                  />
                </figure>
                <div class="flex shrink-1 grow-1 basis-auto flex-col gap-3 p-4">
                  <h2 class="text-lg/5 font-bold">{album.name}</h2>
                </div>
              </a>
            ))}
          </>
        )
      }
    </div>
  </Centered>

  <div class="mx-auto w-11/12">
    <div id="gallery" class="z-0 mb-12">
      {
        images.map((image) => (
          <a
            href={image.src}
            class="gallery-item flex flex-col rounded-md"
            data-pswp-width={image.width}
            data-pswp-height={image.height}
            itemscope
            itemtype="https://schema.org/ImageObject"
            style={`aspect-ratio: ${image.width} / ${image.height};`}
          >
            <figure
              class="rounded-md"
              style={`aspect-ratio: ${image.width} / ${image.height};`}
            >
              <Image
                class="rounded-md"
                src={image}
                alt={`Image in ${albumName}`}
                loading="lazy"
                decoding="async"
                width={600}
                style="width: 100%; height: auto"
              />
            </figure>
          </a>
        ))
      }
    </div>
  </div>
  <script src="../../scripts/post.js"></script>
</Base>
